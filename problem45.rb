# Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
#
# Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
# Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
# Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
# It can be verified that T285 = P165 = H143 = 40755.
#
# Find the next triangle number that is also pentagonal and hexagonal.
def tri(tri_idx)
  tri_idx * (tri_idx + 1) / 2
end
def pent(pent_idx)
  pent_idx * (3 * pent_idx - 1) / 2
end
def hex(hex_idx)
  hex_idx * (2 * hex_idx - 1)
end
def generate_new_pents(pent_values, pent_idx, tri_idx)
  until pent(pent_idx) >= tri(tri_idx)
    pent_idx += 1
    pent_values[pent(pent_idx)] = true
  end
  pent_idx
end

def generate_new_hex(hex_values, hex_idx, tri_idx)
  until hex(hex_idx) >= tri(tri_idx)
    hex_idx += 1
    hex_values[hex(hex_idx)] = true
  end
  hex_idx
end

tri_idx = 286
pent_idx = 1
hex_idx = 1
pent_values = { 1 => true }
hex_values = { 1 => true }

while true
  p tri_idx
  new_tri = tri(tri_idx)
  unless pent(pent_idx) >= new_tri
    pent_idx = generate_new_pents(pent_values, pent_idx, tri_idx)
  end
  unless hex(hex_idx) >= new_tri
    hex_idx = generate_new_hex(hex_values, hex_idx, tri_idx)
  end

  answer = new_tri if pent_values[new_tri] && hex_values[new_tri]
  break if !!answer
  tri_idx += 1
end

p answer
